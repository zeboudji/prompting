import streamlit as st
import plotly.graph_objects as go

# Configuration de la page
st.set_page_config(
    page_title="üöÄ Niveau d'acculturation √† l'IA",
    page_icon="üöÄ",
    layout="centered",
    initial_sidebar_state="collapsed",
)

# Styles personnalis√©s
st.markdown("""
    <style>
    /* Style g√©n√©ral de la page */
    body {
        background-color: #121212;
        color: #ffffff;
    }
    /* Style pour les conteneurs de questions et r√©sultats */
    .container {
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 10px;
        margin-bottom: 20px;
        color: #ffffff;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    /* Style pour le fil d'Ariane */
    .breadcrumb {
        list-style: none;
        display: flex;
        justify-content: space-between;
        padding: 0;
        margin-bottom: 20px;
        font-size: 0.9em;
    }
    .breadcrumb li {
        flex: 1;
        text-align: center;
        position: relative;
    }
    .breadcrumb li::after {
        content: '';
        position: absolute;
        top: 50%;
        right: -50%;
        width: 100%;
        height: 2px;
        background-color: #4CAF50;
        z-index: -1;
    }
    .breadcrumb li:last-child::after {
        content: none;
    }
    .breadcrumb .active {
        font-weight: bold;
        color: #4CAF50;
    }
    /* Style pour les ic√¥nes */
    .icon {
        font-size: 4em;
        margin-bottom: 10px;
    }
    /* Style pour les messages motivants */
    .motivation-message {
        font-size: 1.2em;
        margin-top: 20px;
        color: #81c784;
    }
    /* Style pour les titres */
    .result-title {
        font-size: 2em;
        margin-top: 10px;
    }
    /* Style pour le bouton "D√©couvrez nos formations" en haut √† droite */
    .top-right-button {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }
    /* Style pour les boutons */
    .button-container button {
        background-color: #f44336; 
        color: white; 
        padding: 10px 20px; 
        text-align: center; 
        text-decoration: none; 
        display: inline-block; 
        font-size: 16px; 
        border: none; 
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    .button-container button:hover {
        background-color: #d32f2f;
    }
    /* Responsive adjustments */
    @media (max-width: 600px) {
        .breadcrumb {
            flex-direction: column;
            align-items: center;
        }
        .breadcrumb li::after {
            width: 2px;
            height: 100%;
            top: -50%;
            left: 50%;
            right: auto;
            transform: rotate(90deg);
        }
    }
    </style>
    """, unsafe_allow_html=True)

# Bouton "D√©couvrez nos formations" en haut √† droite
st.markdown("""
    <div class="top-right-button">
        <a href="https://insidegroup.fr/actualites/acculturation-ia/" target="_blank">
            <button style="
                background-color: #4CAF50; 
                color: white; 
                padding: 10px 20px; 
                text-align: center; 
                text-decoration: none; 
                display: inline-block; 
                font-size: 16px; 
                border: none; 
                border-radius: 5px;
                cursor: pointer;">
                üìö D√©couvrez nos formations
            </button>
        </a>
    </div>
    """, unsafe_allow_html=True)

# Titre principal
st.markdown("# üöÄL'IA, est ce pour moi ?")

# Initialisation de l'√©tat de session avec setdefault pour √©viter KeyError
for key in ["responses", "question_number", "show_results"]:
    if key not in st.session_state:
        if key == "responses":
            st.session_state[key] = {}
        elif key == "question_number":
            st.session_state[key] = 0
        elif key == "show_results":
            st.session_state[key] = False

# D√©finition des questions avec th√®mes, emojis et options adapt√©es
questions = [
    {
        "theme": "Compr√©hension des Concepts",
        "question": "üó£Ô∏è **Dans votre m√©tier, vous arrive-t-il d'exprimer des besoins sp√©cifiques √† votre √©quipe ou √† votre sup√©rieur ?**",
        "choices": ["S√©lectionnez une r√©ponse", "üî∞ Rarement", "üìò Parfois", "üåü Fr√©quemment"]
    },
    {
        "theme": "Identification des Besoins",
        "question": "üìã **Est-ce que vous avez l'habitude de r√©colter les besoins de vos clients ou de vos coll√®gues pour d√©finir des projets ?**",
        "choices": ["S√©lectionnez une r√©ponse", "üî∞ Jamais", "üìò Occasionnellement", "üåü R√©guli√®rement"]
    },
    {
        "theme": "Connaissance de l'Agilit√©",
        "question": "‚ö° **Le concept d'agilit√© en gestion de projet vous est-il familier ?**",
        "choices": ["S√©lectionnez une r√©ponse", "üî∞ Pas du tout", "üìò Un peu", "üåü Oui, je l'applique r√©guli√®rement"]
    },
    {
        "theme": "Utilisation des Outils IA",
        "question": "ü§ñ **Utilisez-vous des outils d'intelligence artificielle (IA) pour am√©liorer votre efficacit√© au travail ?**",
        "choices": ["S√©lectionnez une r√©ponse", "üî∞ Jamais", "üìò Parfois", "üåü Fr√©quemment"]
    },
    {
        "theme": "R√©daction de Prompts",
        "question": "üìù **Avez-vous d√©j√† r√©dig√© des prompts pour interagir avec des outils d'IA comme ChatGPT ?**",
        "choices": ["S√©lectionnez une r√©ponse", "üî∞ Jamais", "üìò Rarement", "üåü Souvent"]
    },
    {
        "theme": "Structuration des Informations",
        "question": "üìà **Comment √©valuez-vous votre capacit√© √† organiser les informations fournies par un outil d'IA dans vos rapports ou pr√©sentations ?**",
        "choices": ["S√©lectionnez une r√©ponse", "üî∞ Peu structur√©", "üìò Moyennement structur√©", "üåü Tr√®s structur√©"]
    }
]

def save_response(response, question_num):
    """Sauvegarder la r√©ponse et passer √† la question suivante"""
    st.session_state["responses"][f"Question {question_num}"] = response
    st.session_state["question_number"] += 1
    # Si c'est la derni√®re question, afficher les r√©sultats
    if st.session_state["question_number"] >= len(questions):
        st.session_state["show_results"] = True

# Fonction pour afficher une question avec fil d'Ariane
def display_question(question_data, question_num):
    theme = question_data["theme"]
    question_text = question_data["question"]
    choices = question_data["choices"]

    # Cr√©ation du fil d'Ariane avec th√®mes
    breadcrumb = '<ul class="breadcrumb">'
    for i in range(1, len(questions)+1):
        current_theme = questions[i-1]["theme"]
        if i < question_num:
            breadcrumb += f'<li><span class="active">{current_theme}</span></li>'
        elif i == question_num:
            breadcrumb += f'<li><span class="active">{current_theme}</span></li>'
        else:
            breadcrumb += f'<li>{current_theme}</li>'
    breadcrumb += '</ul>'
    st.markdown(breadcrumb, unsafe_allow_html=True)

    # Affichage de la question
    st.markdown(f"<div class='container'><b>{question_text}</b></div>", unsafe_allow_html=True)

    # Gestion des r√©ponses avec callback
    selected = st.radio("S√©lectionnez une r√©ponse :", choices, key=f"response_{question_num}")

    if selected != "S√©lectionnez une r√©ponse":
        save_response(selected, question_num)
    else:
        st.markdown("<span class='error-message'>Veuillez s√©lectionner une r√©ponse valide.</span>", unsafe_allow_html=True)

# Fonction pour r√©initialiser l'√©valuation
def reset_evaluation():
    st.session_state["responses"] = {}
    st.session_state["question_number"] = 0
    st.session_state["show_results"] = False
    st.experimental_rerun()

# Fonction pour afficher les r√©sultats
def display_results():
    # Calcul des scores pour le graphique radar
    competence_scores = {}
    for idx, q in enumerate(questions, 1):
        response = st.session_state["responses"].get(f"Question {idx}", "S√©lectionnez une r√©ponse")
        # Calculer le score bas√© sur l'index de la r√©ponse
        # Les choix sont ["S√©lectionnez une r√©ponse", "Option 1", "Option 2", "Option 3"]
        # Donc l'index 1 correspond √† score 1, index 2 √† score 2, etc.
        try:
            score = q["choices"].index(response)
        except ValueError:
            score = 0  # Si la r√©ponse n'est pas trouv√©e
        competence_scores[q["theme"]] = score

    categories = list(competence_scores.keys())
    values = list(competence_scores.values())

    # Calcul du pourcentage de compatibilit√©
    total_score = sum(values)
    max_score = len(values) * 3
    pourcentage = (total_score / max_score) * 100 if max_score > 0 else 0

    # D√©termination du niveau bas√© sur le pourcentage
    if pourcentage < 60:
        niveau = "üéì Sensibilisation √† l'IA"
        niveau_message = "Vous √™tes √©ligible √† la **Sensibilisation** pour mieux comprendre les fondamentaux de l'IA. Toutes les conditions sont r√©unies !"
        recommandation = "Nous vous recommandons de suivre notre formation de sensibilisation pour approfondir vos connaissances sur l'intelligence artificielle."
    else:
        niveau = "üöÄ Acculturation pour devenir un AS de l'IA"
        niveau_message = "F√©licitations ! Vous √™tes √©ligible √† l'**Acculturation** pour devenir un **AS de l'IA**. Toutes les conditions sont r√©unies !"
        recommandation = "Nous vous invitons √† rejoindre notre programme d'acculturation avanc√©e pour ma√Ætriser pleinement les outils et concepts de l'intelligence artificielle."

    # Cr√©ation du graphique radar avec Plotly
    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Comp√©tences',
        marker=dict(color='rgba(56, 128, 255, 0.6)')
    ))

    fig.update_layout(
        title="üåü Votre Radar de Comp√©tences en IA üåü",
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 3],
                tickvals=[0, 1, 2, 3],
                ticktext=["0", "1", "2", "3"]
            ),
            angularaxis=dict(showline=True, linecolor="lightgrey")
        ),
        showlegend=False,
        template="plotly_dark",
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Cr√©ation du contenu HTML complet pour la page des r√©sultats
    st.markdown("<div class='container result-container'>/div>", unsafe_allow_html=True)
    
    # Ic√¥ne de f√©licitations
    st.markdown("<div class='icon'>üåü</div>", unsafe_allow_html=True)
    
    # Titre de f√©licitations
    st.markdown("**F√©licitations !**", unsafe_allow_html=True)
    
    # Niveau d'acculturation
    st.markdown(f"### üî¢ Votre Niveau d'Acculturation √† l'IA: **{pourcentage:.1f}%**", unsafe_allow_html=True)
    st.markdown(f"### **{niveau}**", unsafe_allow_html=True)
    
    # Ajout d'un espace
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Afficher le graphique radar
    st.plotly_chart(fig, use_container_width=True)
    
    # Ajout d'un espace
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Message de niveau
    st.markdown(f"<div class='motivation-message'><b>{niveau_message}</b></div>", unsafe_allow_html=True)
    
    # Recommandation suppl√©mentaire
    st.markdown(f"<div class='motivation-message'>{recommandation}</div>", unsafe_allow_html=True)
    
    # Proposition de formation avec lien
    st.markdown("""
        ---
        üéì **Continuez votre parcours !**
        
        Vous avez obtenu un score de **{pourcentage:.1f}%** dans votre √©valuation. Cela d√©montre une forte compatibilit√© avec nos formations avanc√©es qui vous permettront de devenir un v√©ritable **pro de l'IA**.
        
        üëâ [D√©couvrez nos formations](https://insidegroup.fr/actualites/acculturation-ia/)
    """.format(pourcentage=pourcentage), unsafe_allow_html=True)
    
    # Bouton pour recommencer l'√©valuation
    st.markdown("<div class='button-container'>", unsafe_allow_html=True)
    if st.button("üîÑ Recommencer l'√©valuation"):
        reset_evaluation()
    st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)

# Affichage des questions ou des r√©sultats selon l'√©tat
if not st.session_state["show_results"]:
    if st.session_state["question_number"] < len(questions):
        current_question_num = st.session_state["question_number"] + 1
        current_q = questions[st.session_state["question_number"]]
        display_question(current_q, current_question_num)
    else:
        st.session_state["show_results"] = True

if st.session_state["show_results"]:
    display_results()
